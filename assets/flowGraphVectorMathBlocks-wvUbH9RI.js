import{r as s,K as B,V as i,m as h,b as p,M as u,N as w,J as G,R as c,y as m,I as k,d as a}from"./index-BYi5Ktp1.js";import{F as l}from"./flowGraphBinaryOperationBlock-BxBTSkvZ.js";import{F}from"./flowGraphUnaryOperationBlock-BZs9scBB.js";import{F as y}from"./flowGraphTernaryOperationBlock-Dz7JT8jC.js";import"./flowGraphCachedOperationBlock-CojUBp3u.js";class V extends F{constructor(o){super(c,p,t=>this._polymorphicLength(t),"FlowGraphLengthBlock",o)}_polymorphicLength(o){switch(m(o)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return o.length();default:throw new Error(`Cannot compute length of value ${o}`)}}}a("FlowGraphLengthBlock",V);class d extends F{constructor(o){super(c,c,t=>this._polymorphicNormalize(t),"FlowGraphNormalizeBlock",o)}_polymorphicNormalize(o){var n;const t=m(o);let e;switch(t){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return e=o.normalizeToNew(),(n=this.config)!=null&&n.nanOnZeroLength&&o.length()===0&&e.setAll(NaN),e;default:throw new Error(`Cannot normalize value ${o}`)}}}a("FlowGraphNormalizeBlock",d);class f extends l{constructor(o){super(c,c,p,(t,e)=>this._polymorphicDot(t,e),"FlowGraphDotBlock",o)}_polymorphicDot(o,t){switch(m(o)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return o.dot(t);default:throw new Error(`Cannot get dot product of ${o} and ${t}`)}}}a("FlowGraphDotBlock",f);class T extends l{constructor(o){super(s,s,s,(t,e)=>i.Cross(t,e),"FlowGraphCrossBlock",o)}}a("FlowGraphCrossBlock",T);class x extends l{constructor(o){super(w,p,w,(t,e)=>G.Transform(t,u.RotationZ(e)),"FlowGraphRotate2DBlock",o)}}a("FlowGraphRotate2DBlock",x);class C extends y{constructor(o){super(s,s,p,s,(t,e,n)=>i.TransformCoordinates(t,u.RotationAxis(e,n)),"FlowGraphRotate3DBlock",o)}}a("FlowGraphRotate3DBlock",C);function N(r,o){switch(m(r)){case"Vector2":return o.transformVector(r);case"Vector3":return o.transformVector(r);case"Vector4":return r=r,new k(r.x*o.m[0]+r.y*o.m[1]+r.z*o.m[2]+r.w*o.m[3],r.x*o.m[4]+r.y*o.m[5]+r.z*o.m[6]+r.w*o.m[7],r.x*o.m[8]+r.y*o.m[9]+r.z*o.m[10]+r.w*o.m[11],r.x*o.m[12]+r.y*o.m[13]+r.z*o.m[14]+r.w*o.m[15]);default:throw new Error(`Cannot transform value ${r}`)}}class R extends l{constructor(o){const t=(o==null?void 0:o.vectorType)||"Vector3",e=t==="Vector2"?"Matrix2D":t==="Vector3"?"Matrix3D":"Matrix";super(h(t),h(e),h(t),N,"FlowGraphTransformVectorBlock",o)}}a("FlowGraphTransformVectorBlock",R);class D extends l{constructor(o){super(s,B,s,(t,e)=>i.TransformCoordinates(t,e),"FlowGraphTransformCoordinatesBlock",o)}}a("FlowGraphTransformCoordinatesBlock",D);export{T as FlowGraphCrossBlock,f as FlowGraphDotBlock,V as FlowGraphLengthBlock,d as FlowGraphNormalizeBlock,x as FlowGraphRotate2DBlock,C as FlowGraphRotate3DBlock,R as FlowGraphTransformBlock,D as FlowGraphTransformCoordinatesBlock};
