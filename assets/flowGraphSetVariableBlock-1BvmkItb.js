import{l as v,R as u,d as h}from"./index-OR8pD1Ut.js";class p extends v{constructor(a){if(super(a),!a.variable&&!a.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(a.variables&&a.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(a.variables)for(const e of a.variables)this.registerDataInput(e,u);else this.registerDataInput("value",u)}_execute(a,e){var r,i;if((r=this.config)!=null&&r.variables)for(const t of this.config.variables)this._saveVariable(a,t);else this._saveVariable(a,(i=this.config)==null?void 0:i.variable,"value");this.out._activateSignal(a)}_saveVariable(a,e,r){var s;const i=a._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const n of i){const o=a.assetsContext.animationGroups[n];for(const l of o.targetedAnimations)if(l.target===a&&l.target===a&&l.animation.targetProperty===e){o.stop();const b=i.indexOf(n);b>-1&&i.splice(b,1),a._setGlobalContextVariable("currentlyRunningAnimationGroups",i);break}}const t=(s=this.getDataInput(r||e))==null?void 0:s.getValue(a);a.setVariable(e,t)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(a){var e;super.serialize(a),a.config.variable=(e=this.config)==null?void 0:e.variable}}h("FlowGraphSetVariableBlock",p);export{p as FlowGraphSetVariableBlock};
